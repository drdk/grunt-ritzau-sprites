// Generated by CoffeeScript 1.6.3
var SpriteGenerator, XMLHttpRequest, fs, http, parseXml, phantom,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

XMLHttpRequest = require('w3c-xmlhttprequest').XMLHttpRequest;

fs = require('fs');

parseXml = require('xml2js').parseString;

http = require('http');

phantom = require("phantom");

SpriteGenerator = (function() {
  SpriteGenerator.prototype.filenamePrefix = "ritzau-logo";

  SpriteGenerator.prototype.subDirectory = "ritzau-logos";

  SpriteGenerator.prototype.cssSubDirectory = "ritzau-css";

  SpriteGenerator.prototype.logoPath = "../../img/ritzau-logos/";

  SpriteGenerator.prototype.spriteUrl = "../../img/sprites/ritzau-logos.png";

  SpriteGenerator.prototype.cssTemplate = ".{name} {\n    width: {width}px;\n    height: {height}px;\n    background-image: url(\"{logoPath}{logoName}\");\n}\n.{name}-sprite {\n    width: {width}px;\n    height: {height}px;\n    background-position: 0 -{pos}px;\n}";

  SpriteGenerator.prototype.cssFooterTemplate = "/* Default classes */\n[class*=\"{prefix}\"] {\n    display: block;\n    overflow: hidden;\n    background-repeat: no-repeat;\n    background-image: none;\n    text-indent: -9999px;\n}\n[class*=\"{prefix}\"][class*=-sprite] {\n    background-image: url(\"{spriteUrl}\");\n}";

  /* EPG
  */


  function SpriteGenerator(epgFeedUrl, killer) {
    this.epgRequestCallback = __bind(this.epgRequestCallback, this);
    var options;
    options = options || {};
    console.log("Generating Ritzau logos + sprite ...");
    this.killer = killer;
    if (!!options.filenamePrefix) {
      this.filenamePrefix = options.filenamePrefix;
    }
    if (!!options.imageDirectory) {
      this.subDirectory = options.imageDirectory;
    }
    if (!!options.cssDirectory) {
      this.cssSubDirectory = options.cssDirectory;
    }
    if (!!options.urlLogos) {
      this.logoPath = options.urlLogos;
    }
    if (!!options.urlSprite) {
      this.spriteUrl = options.urlSprite;
    }
    fs.mkdir(dir, function(error) {
      if (error) {
        return console.log("Failed to create directory", error);
      }
    });
    this.epgRequest();
  }

  /* EPG
  */


  SpriteGenerator.prototype.epgRequest = function() {
    this.client = new XMLHttpRequest();
    this.client.open("GET", epgFeedUrl);
    this.client.addEventListener("load", this.epgRequestCallback, false);
    return this.client.send();
  };

  SpriteGenerator.prototype.epgRequestCallback = function() {
    var data,
      _this = this;
    data = this.client.response;
    return parseXml(data, function(error, result) {
      return console.dir(result);
    });
  };

  /* Image parsing
  */


  return SpriteGenerator;

})();
